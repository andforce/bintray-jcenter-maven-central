apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

configurations {
    optional
    compile.extendsFrom optional
}

def siteUrl = project.WEBSITE_URL
def gitUrl = project.VSC_URL
def libName = project.LIB_NAME

group = project.PUBLISH_GROUP_ID
version = project.PUBLISH_VERSION

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    configurations = ['archives']

    pkg {
        repo = "maven"  //发布到Bintray的maven库
        name = libName  //发布到Bintray上的项目名字
        desc = project.PUBLISH_DES
        publicDownloadNumbers = true
        websiteUrl = siteUrl
        issueTrackerUrl = project.ISSUE_TRACKER_URL
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        publish = true
        //attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']
    }
}
configurations {
    optional
    compile.extendsFrom optional
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(configurations.compile.files,android.getBootClasspath().join(File.pathSeparator))
}


android.libraryVariants.all { variant ->
    println variant.javaCompile.classpath.files
    if(variant.name == 'release') { //我们只需 release 的 javadoc
        task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
            // title = ''
            // description = ''
            source = variant.javaCompile.source
            classpath = files(variant.javaCompile.classpath.files, project.android.getBootClasspath())
            options {
                encoding "utf-8"
                links "http://docs.oracle.com/javase/7/docs/api/"
                linksOffline "http://d.android.com/reference", "${android.sdkDirectory}/docs/reference"
            }
            exclude '**/BuildConfig.java'
            exclude '**/R.java'
        }
        task("javadoc${variant.name.capitalize()}Jar", type: Jar, dependsOn: "generate${variant.name.capitalize()}Javadoc") {
            classifier = 'javadoc'
            from tasks.getByName("generate${variant.name.capitalize()}Javadoc").destinationDir
        }
        artifacts {
            archives tasks.getByName("javadoc${variant.name.capitalize()}Jar")
        }
    }
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream()) // local.properties 有 sdk 的绝对位置
allprojects {
    repositories {
        maven {
            url properties.getProperty("sdk.dir")+"/extras/android/m2repository"
        }
        mavenLocal()
        jcenter()
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

task jcenter << {
    println "Release ${version}"
}

jcenter.dependsOn(install)
jcenter.dependsOn(bintrayUpload)
